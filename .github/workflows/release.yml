name: Release

on:
  push:
    # Only trigger on semantic version tags (e.g., v1.0.0, 0.1.0, 1.2.3-alpha.1)
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
      - '[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (semantic version format)'
        required: true
        type: string
      dry_run:
        description: 'Perform a dry run (build only, no publish)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write  # Required for PyPI trusted publishing

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  validate-release:
    name: validate release tag
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
    steps:
      - name: extract version from tag
        id: extract
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi

          # Remove 'v' prefix if present
          VERSION=${TAG#v}

          # Validate semantic version format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Error: Invalid semantic version format: $VERSION"
            exit 1
          fi

          # Check if prerelease
          IS_PRERELEASE="false"
          if [[ $VERSION =~ -[a-zA-Z] ]]; then
            IS_PRERELEASE="true"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Validated version: $VERSION (prerelease: $IS_PRERELEASE)"

  build:
    name: build on ${{ matrix.os }} (${{ matrix.target }})
    needs: validate-release
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [linux, macos, windows]
        target: [x86_64, aarch64]
        include:
          - os: linux
            runs-on: ubuntu-latest
          - os: macos
            runs-on: macos-latest
          - os: windows
            runs-on: windows-latest
        exclude:
          # Windows aarch64 not supported yet
          - os: windows
            target: aarch64
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v5

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: setup build cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.target }}-release

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          rust-toolchain: stable
        env:
          MATURIN_BUILD_ARGS: "--verbose"

      - name: verify wheel contents
        shell: bash
        run: |
          python -m pip install --upgrade pip wheel
          for wheel in dist/*.whl; do
            echo "Checking wheel: $wheel"
            python -m wheel unpack "$wheel" --dest temp_wheel
            ls -la temp_wheel/
            rm -rf temp_wheel/
          done

      - name: upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: pypi_files_${{ matrix.os }}_${{ matrix.target }}
          path: dist
          retention-days: 7

      - name: build status notification
        if: failure()
        run: |
          echo "::error::Build failed for ${{ matrix.os }} (${{ matrix.target }})"
          echo "::notice::Check the build logs for detailed error information"

  build-sdist:
    name: build sdist
    needs: validate-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v5

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: setup build cache
        uses: Swatinem/rust-cache@v2
        with:
          key: sdist-release

      - name: build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable

      - name: verify sdist contents
        run: |
          python -m pip install --upgrade pip
          for sdist in dist/*.tar.gz; do
            echo "Checking sdist: $sdist"
            tar -tzf "$sdist" | head -20
          done

      - name: upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: pypi_files_sdist
          path: dist
          retention-days: 7

      - name: sdist build status notification
        if: failure()
        run: |
          echo "::error::Source distribution build failed"
          echo "::notice::Check the build logs for detailed error information"

  release:
    name: create github release
    runs-on: ubuntu-latest
    needs: [validate-release, build, build-sdist]
    if: startsWith(github.ref, 'refs/tags/') && !github.event.inputs.dry_run
    steps:
      - uses: actions/checkout@v5

      - name: get dist artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: verify artifacts
        run: |
          echo "Release artifacts:"
          ls -la dist/
          echo "Total files: $(ls -1 dist/ | wc -l)"

          # Verify we have both wheels and sdist
          if [ ! -f dist/*.tar.gz ]; then
            echo "::error::No source distribution found"
            exit 1
          fi

          if [ ! -f dist/*.whl ]; then
            echo "::error::No wheel files found"
            exit 1
          fi

      - name: create github release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body: |
            ## Release ${{ needs.validate-release.outputs.version }}

            This release includes:
            - Python wheels for Linux, macOS, and Windows
            - Source distribution
            - ABI3 compatibility for broader Python support

            ### Installation
            ```bash
            pip install rez-core==${{ needs.validate-release.outputs.version }}
            ```

      - name: release status notification
        if: failure()
        run: |
          echo "::error::GitHub release creation failed"
          echo "::notice::Check the release logs for detailed error information"

  publish:
    name: publish to pypi
    runs-on: ubuntu-latest
    needs: [validate-release, build, build-sdist, release]
    if: startsWith(github.ref, 'refs/tags/') && !github.event.inputs.dry_run
    permissions:
      id-token: write
    steps:
      - name: get dist artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: verify artifacts before publish
        run: |
          echo "PyPI artifacts:"
          ls -la dist/

          # Check file integrity
          python -m pip install --upgrade pip twine
          python -m twine check dist/*

      - name: publish to pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
          print-hash: true

      - name: verify pypi publication
        run: |
          echo "::notice::Package published to PyPI: https://pypi.org/project/rez-core/${{ needs.validate-release.outputs.version }}/"
          echo "::notice::Installation command: pip install rez-core==${{ needs.validate-release.outputs.version }}"

      - name: publish status notification
        if: failure()
        run: |
          echo "::error::PyPI publication failed"
          echo "::notice::Check the publish logs for detailed error information"

  post-release:
    name: post-release tasks
    runs-on: ubuntu-latest
    needs: [validate-release, release, publish]
    if: always() && startsWith(github.ref, 'refs/tags/') && !github.event.inputs.dry_run
    steps:
      - name: release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prerelease**: ${{ needs.validate-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI Publish**: ${{ needs.publish.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Links" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
          echo "- [PyPI Package](https://pypi.org/project/rez-core/${{ needs.validate-release.outputs.version }}/)" >> $GITHUB_STEP_SUMMARY
